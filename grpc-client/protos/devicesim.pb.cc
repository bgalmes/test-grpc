// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: devicesim.proto
// Protobuf C++ Version: 6.31.0

#include "devicesim.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace devicesim {
template <typename>
PROTOBUF_CONSTEXPR DeviceRequest::DeviceRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(DeviceRequest_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct DeviceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceRequestDefaultTypeInternal() {}
  union {
    DeviceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceRequestDefaultTypeInternal _DeviceRequest_default_instance_;

inline constexpr DeviceReply::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        device_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        temperature_{0},
        humidity_{0},
        timestamp_{::int64_t{0}},
        pressure_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DeviceReply::DeviceReply(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DeviceReply_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DeviceReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceReplyDefaultTypeInternal() {}
  union {
    DeviceReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceReplyDefaultTypeInternal _DeviceReply_default_instance_;
}  // namespace devicesim
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_devicesim_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_devicesim_2eproto = nullptr;
const ::uint32_t
    TableStruct_devicesim_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x000, // bitmap
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::devicesim::DeviceReply, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::devicesim::DeviceReply, _impl_.device_name_),
        PROTOBUF_FIELD_OFFSET(::devicesim::DeviceReply, _impl_.temperature_),
        PROTOBUF_FIELD_OFFSET(::devicesim::DeviceReply, _impl_.humidity_),
        PROTOBUF_FIELD_OFFSET(::devicesim::DeviceReply, _impl_.pressure_),
        PROTOBUF_FIELD_OFFSET(::devicesim::DeviceReply, _impl_.timestamp_),
        0,
        1,
        2,
        4,
        3,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::devicesim::DeviceRequest)},
        {1, sizeof(::devicesim::DeviceReply)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::devicesim::_DeviceRequest_default_instance_._instance,
    &::devicesim::_DeviceReply_default_instance_._instance,
};
const char descriptor_table_protodef_devicesim_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\017devicesim.proto\022\tdevicesim\"\017\n\rDeviceRe"
    "quest\"n\n\013DeviceReply\022\023\n\013device_name\030\001 \001("
    "\t\022\023\n\013temperature\030\002 \001(\002\022\020\n\010humidity\030\003 \001(\002"
    "\022\020\n\010pressure\030\004 \001(\002\022\021\n\ttimestamp\030\005 \001(\0032^\n"
    "\rDeviceService\022M\n\025DeviceVariablesValues\022"
    "\030.devicesim.DeviceRequest\032\026.devicesim.De"
    "viceReply\"\0000\001B\006\242\002\003HLWb\006proto3"
};
static ::absl::once_flag descriptor_table_devicesim_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_devicesim_2eproto = {
    false,
    false,
    269,
    descriptor_table_protodef_devicesim_2eproto,
    "devicesim.proto",
    &descriptor_table_devicesim_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_devicesim_2eproto::offsets,
    file_level_enum_descriptors_devicesim_2eproto,
    file_level_service_descriptors_devicesim_2eproto,
};
namespace devicesim {
// ===================================================================

class DeviceRequest::_Internal {
 public:
};

DeviceRequest::DeviceRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, DeviceRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:devicesim.DeviceRequest)
}
DeviceRequest::DeviceRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DeviceRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, DeviceRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DeviceRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:devicesim.DeviceRequest)
}

inline void* PROTOBUF_NONNULL DeviceRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DeviceRequest(arena);
}
constexpr auto DeviceRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DeviceRequest),
                                            alignof(DeviceRequest));
}
constexpr auto DeviceRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DeviceRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DeviceRequest::MergeImpl,
          ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<DeviceRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DeviceRequest::SharedDtor,
          ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<DeviceRequest>(), &DeviceRequest::ByteSizeLong,
              &DeviceRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DeviceRequest, _impl_._cached_size_),
          false,
      },
      &DeviceRequest::kDescriptorMethods,
      &descriptor_table_devicesim_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull DeviceRequest_class_data_ =
        DeviceRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
DeviceRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DeviceRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DeviceRequest_class_data_.tc_table);
  return DeviceRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2>
DeviceRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DeviceRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::devicesim::DeviceRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, // no field_entries, or aux_entries
  {{
  }},
};







::google::protobuf::Metadata DeviceRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DeviceReply::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<DeviceReply>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_._has_bits_);
};

DeviceReply::DeviceReply(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DeviceReply_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:devicesim.DeviceReply)
}
PROTOBUF_NDEBUG_INLINE DeviceReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::devicesim::DeviceReply& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        device_name_(arena, from.device_name_) {}

DeviceReply::DeviceReply(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DeviceReply& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DeviceReply_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DeviceReply* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, temperature_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, temperature_),
           offsetof(Impl_, pressure_) -
               offsetof(Impl_, temperature_) +
               sizeof(Impl_::pressure_));

  // @@protoc_insertion_point(copy_constructor:devicesim.DeviceReply)
}
PROTOBUF_NDEBUG_INLINE DeviceReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        device_name_(arena) {}

inline void DeviceReply::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, temperature_),
           0,
           offsetof(Impl_, pressure_) -
               offsetof(Impl_, temperature_) +
               sizeof(Impl_::pressure_));
}
DeviceReply::~DeviceReply() {
  // @@protoc_insertion_point(destructor:devicesim.DeviceReply)
  SharedDtor(*this);
}
inline void DeviceReply::SharedDtor(MessageLite& self) {
  DeviceReply& this_ = static_cast<DeviceReply&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.device_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DeviceReply::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DeviceReply(arena);
}
constexpr auto DeviceReply::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DeviceReply),
                                            alignof(DeviceReply));
}
constexpr auto DeviceReply::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DeviceReply_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DeviceReply::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DeviceReply>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DeviceReply::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DeviceReply>(), &DeviceReply::ByteSizeLong,
              &DeviceReply::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_._cached_size_),
          false,
      },
      &DeviceReply::kDescriptorMethods,
      &descriptor_table_devicesim_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull DeviceReply_class_data_ =
        DeviceReply::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
DeviceReply::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DeviceReply_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DeviceReply_class_data_.tc_table);
  return DeviceReply_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 41, 2>
DeviceReply::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DeviceReply_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::devicesim::DeviceReply>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string device_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_.device_name_)}},
    // float temperature = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_.temperature_)}},
    // float humidity = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_.humidity_)}},
    // float pressure = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 4, 0, PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_.pressure_)}},
    // int64 timestamp = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DeviceReply, _impl_.timestamp_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_.timestamp_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string device_name = 1;
    {PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_.device_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float temperature = 2;
    {PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_.temperature_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float humidity = 3;
    {PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_.humidity_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float pressure = 4;
    {PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_.pressure_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // int64 timestamp = 5;
    {PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_.timestamp_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\25\13\0\0\0\0\0\0"
    "devicesim.DeviceReply"
    "device_name"
  }},
};
PROTOBUF_NOINLINE void DeviceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:devicesim.DeviceReply)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.device_name_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000001eu) != 0) {
    ::memset(&_impl_.temperature_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pressure_) -
        reinterpret_cast<char*>(&_impl_.temperature_)) + sizeof(_impl_.pressure_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DeviceReply::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DeviceReply& this_ = static_cast<const DeviceReply&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DeviceReply::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DeviceReply& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:devicesim.DeviceReply)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string device_name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_device_name().empty()) {
      const ::std::string& _s = this_._internal_device_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "devicesim.DeviceReply.device_name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // float temperature = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_temperature()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          2, this_._internal_temperature(), target);
    }
  }

  // float humidity = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_humidity()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          3, this_._internal_humidity(), target);
    }
  }

  // float pressure = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_pressure()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          4, this_._internal_pressure(), target);
    }
  }

  // int64 timestamp = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_timestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<5>(
              stream, this_._internal_timestamp(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:devicesim.DeviceReply)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DeviceReply::ByteSizeLong(const MessageLite& base) {
  const DeviceReply& this_ = static_cast<const DeviceReply&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DeviceReply::ByteSizeLong() const {
  const DeviceReply& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:devicesim.DeviceReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // string device_name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_device_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_device_name());
      }
    }
    // float temperature = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_temperature()) != 0) {
        total_size += 5;
      }
    }
    // float humidity = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_humidity()) != 0) {
        total_size += 5;
      }
    }
    // int64 timestamp = 5;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_timestamp());
      }
    }
    // float pressure = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_pressure()) != 0) {
        total_size += 5;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DeviceReply::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DeviceReply*>(&to_msg);
  auto& from = static_cast<const DeviceReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:devicesim.DeviceReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_device_name().empty()) {
        _this->_internal_set_device_name(from._internal_device_name());
      } else {
        if (_this->_impl_.device_name_.IsDefault()) {
          _this->_internal_set_device_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_temperature()) != 0) {
        _this->_impl_.temperature_ = from._impl_.temperature_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_humidity()) != 0) {
        _this->_impl_.humidity_ = from._impl_.humidity_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_timestamp() != 0) {
        _this->_impl_.timestamp_ = from._impl_.timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_pressure()) != 0) {
        _this->_impl_.pressure_ = from._impl_.pressure_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceReply::CopyFrom(const DeviceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:devicesim.DeviceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DeviceReply::InternalSwap(DeviceReply* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_name_, &other->_impl_.device_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_.pressure_)
      + sizeof(DeviceReply::_impl_.pressure_)
      - PROTOBUF_FIELD_OFFSET(DeviceReply, _impl_.temperature_)>(
          reinterpret_cast<char*>(&_impl_.temperature_),
          reinterpret_cast<char*>(&other->_impl_.temperature_));
}

::google::protobuf::Metadata DeviceReply::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace devicesim
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_devicesim_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
