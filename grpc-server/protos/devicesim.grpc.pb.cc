// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: devicesim.proto

#include "devicesim.pb.h"
#include "devicesim.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace devicesim {

static const char* DeviceService_method_names[] = {
  "/devicesim.DeviceService/DeviceVariablesValues",
};

std::unique_ptr< DeviceService::Stub> DeviceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeviceService::Stub> stub(new DeviceService::Stub(channel, options));
  return stub;
}

DeviceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DeviceVariablesValues_(DeviceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::devicesim::DeviceReply>* DeviceService::Stub::DeviceVariablesValuesRaw(::grpc::ClientContext* context, const ::devicesim::DeviceRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::devicesim::DeviceReply>::Create(channel_.get(), rpcmethod_DeviceVariablesValues_, context, request);
}

void DeviceService::Stub::async::DeviceVariablesValues(::grpc::ClientContext* context, const ::devicesim::DeviceRequest* request, ::grpc::ClientReadReactor< ::devicesim::DeviceReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::devicesim::DeviceReply>::Create(stub_->channel_.get(), stub_->rpcmethod_DeviceVariablesValues_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::devicesim::DeviceReply>* DeviceService::Stub::AsyncDeviceVariablesValuesRaw(::grpc::ClientContext* context, const ::devicesim::DeviceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::devicesim::DeviceReply>::Create(channel_.get(), cq, rpcmethod_DeviceVariablesValues_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::devicesim::DeviceReply>* DeviceService::Stub::PrepareAsyncDeviceVariablesValuesRaw(::grpc::ClientContext* context, const ::devicesim::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::devicesim::DeviceReply>::Create(channel_.get(), cq, rpcmethod_DeviceVariablesValues_, context, request, false, nullptr);
}

DeviceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DeviceService::Service, ::devicesim::DeviceRequest, ::devicesim::DeviceReply>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::devicesim::DeviceRequest* req,
             ::grpc::ServerWriter<::devicesim::DeviceReply>* writer) {
               return service->DeviceVariablesValues(ctx, req, writer);
             }, this)));
}

DeviceService::Service::~Service() {
}

::grpc::Status DeviceService::Service::DeviceVariablesValues(::grpc::ServerContext* context, const ::devicesim::DeviceRequest* request, ::grpc::ServerWriter< ::devicesim::DeviceReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace devicesim
#include <grpcpp/ports_undef.inc>

